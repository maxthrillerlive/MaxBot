
> class ShoutoutPlugin {
>   constructor() {
>     this.name = 'shoutout';
>     this.description = 'Provides shoutout functionality with Twitch integration and auto-shoutouts';
>     this.enabled = true;
>     this.client = null;
>     this.pluginManager = null;
>     this.bot = null;
>     this.logger = null;
>     this.configManager = null;
>     this.config = null;
>     this.shoutoutHistory = {};
>     this.recentlyProcessedMessages = [];
>     this.commands = [];
>     
>     // Help information
>     this.help = {
>       title: 'Shoutout Plugin',
>       description: 'Provides shoutout commands for streamers with Twitch API integration',
>       commands: [
>         {
>           name: 'so',
>           usage: '!so <username> [custom message]',
>           description: 'Gives a shoutout to a streamer with their channel info'
>         },
>         {
>           name: 'synctemplates',
>           usage: '!synctemplates',
>           description: 'Troubleshooting command to sync message templates between config formats'
>         },
>         {
>           name: 'cleanshoutouts',
>           usage: '!cleanshoutouts',
>           description: 'Clean up the shoutout history to only include streamers'
>         }
>       ],
>       config: {
>         description: 'Configure shoutout settings using !plugin shoutout config',
>         settings: [
>           {
>             name: 'autoShoutout.enabled',
>             type: 'boolean',
>             description: 'Enable/disable automatic shoutouts for returning chatters'
>           },
>           {
>             name: 'autoShoutout.cooldownHours',
>             type: 'number',
>             description: 'Hours between auto-shoutouts for the same user'
>           },
>           {
>             name: 'autoShoutout.welcomeMessage',
>             type: 'string',
>             description: 'Message to send when a known streamer returns'
>           },
>           {
>             name: 'autoShoutout.message',
>             type: 'string',
>             description: 'Message template for auto-shoutouts'
>           },
>           {
>             name: 'knownStreamers',
>             type: 'array',
>             description: 'List of known streamer usernames'
>           },
>           {
>             name: 'knownNonStreamers',
>             type: 'array',
>             description: 'List of known non-streamer usernames'
>           },
>           {
>             name: 'streamerMessageTemplate',
>             type: 'string',
>             description: 'Message template for manual shoutouts to streamers'
>           },
>           {
>             name: 'nonStreamerMessageTemplate',
>             type: 'string',
>             description: 'Message template for manual shoutouts to non-streamers'
>           },
>           {
>             name: 'announcementPrefix',
>             type: 'string',
>             description: 'Prefix for shoutout announcements'
>           },
>           {
>             name: 'messages.streamer',
>             type: 'string',
>             description: 'Alternative location for streamer message template'
>           },
>           {
>             name: 'messages.nonStreamer',
>             type: 'string',
>             description: 'Alternative location for non-streamer message template'
>           }
>         ]
>       }
>     };
>   }
> 
>   init(bot) {
>     this.client = bot.client;
>     this.pluginManager = bot.pluginManager;
>     this.bot = bot;
>     this.logger = bot.logger;
>     this.configManager = bot.pluginManager.configManager;
>     
>     // Load the configuration
>     this.reloadConfig();
>     
>     // Set enabled state from config
>     this.enabled = this.config.enabled;
>     
>     // Register commands
>     this.registerCommands();
>     
>     // Set up event listeners
>     this.setupEventListeners();
>     
>     // Load shoutout history
>     this.loadShoutoutHistory();
>     
>     // Clean up the shoutout history to ensure only streamers are stored
>     this.cleanShoutoutHistory();
>     
>     this.logger.info(`[${this.name}] Plugin initialized successfully`);
>   }
>   
>   setupEventListeners() {
>     // Listen for channel joins to potentially trigger auto-shoutouts
>     this.bot.events.on('twitch:join', this.onChannelJoin.bind(this));
>     
>     // Listen for messages to process auto-shoutouts
>     this.bot.events.on('twitch:message', this.onTwitchMessage.bind(this));
>   }
>   
>   reloadConfig() {
>     this.logger.info(`[${this.name}] Reloading configuration`);
>     
>     // Load the config with defaults
>     this.config = this.configManager.loadPluginConfig(this.name, {
>       streamerMessageTemplate: 'ðŸŽ® Check out @{displayName} over at https://twitch.tv/{username} - 
They\'re an awesome streamer!!! ðŸ‘',
>       nonStreamerMessageTemplate: 'ðŸ’– Shoutout to @{displayName}! Check them out at 
https://twitch.tv/{username}! ðŸ’–',
>       announcementPrefix: 'ðŸ“¢ Announcement:',
>       autoShoutout: {
>         enabled: true,
>         cooldownHours: 24,
>         welcomeMessage: "Welcome back to the channel, @{username}!",
>         message: "ðŸŽ® Look who it is, @{username}! Check them out over at 
https://twitch.tv/{username}!!! ðŸ‘"
>       },
>       knownStreamers: [],
>       knownNonStreamers: [],
>       enabled: true,
>       cooldownMinutes: 60,
>       excludedUsers: []
>     });
>     
>     // Normalize legacy config properties that might have different casing
>     let configUpdated = false;
>     
>     // Handle the case where 'autoshoutout' (lowercase) exists instead of autoShoutout (camelCase)
>     if (this.config.autoshoutout !== undefined) {
>       // Convert string values to the proper autoShoutout.enabled boolean
>       if (typeof this.config.autoshoutout === 'string') {
>         const normalizedValue = this.config.autoshoutout.toLowerCase();
>         const isEnabled = normalizedValue === 'enable' || normalizedValue === 'enabled' || 
normalizedValue === 'true';
>         
>         if (!this.config.autoShoutout) {
>           this.config.autoShoutout = {
>             enabled: isEnabled,
>             cooldownHours: 24,
>             welcomeMessage: "Welcome back to the channel, @{username}!",
>             message: "ðŸŽ® Look who it is, @{username}! Check them out over at 
https://twitch.tv/{username}!!! ðŸ‘"
>           };
>         } else {
>           // Update just the enabled property if object already exists
>           this.config.autoShoutout.enabled = isEnabled;
>         }
>         
>         configUpdated = true;
>         this.logger.info(`[${this.name}] Normalized legacy 'autoshoutout' string value 
"${this.config.autoshoutout}" to boolean: ${isEnabled}`);
>       } else if (typeof this.config.autoshoutout === 'object') {
>         // If someone has accidentally created an 'autoshoutout' (lowercase) object, convert it
>         this.config.autoShoutout = {...this.config.autoshoutout};
>         configUpdated = true;
>         this.logger.info(`[${this.name}] Converted legacy 'autoshoutout' object to 'autoShoutout'`);
>       }
>       
>       // Remove the legacy property
>       delete this.config.autoshoutout;
>       configUpdated = true;
>     }
>     
>     // If we've updated the config, save it
>     if (configUpdated) {
>       this.configManager.savePluginConfig(this.name, this.config);
>       this.logger.info(`[${this.name}] Saved normalized configuration`);
>     }
>     
>     // Check if the message templates exist and log them
>     this.logger.info(`[${this.name}] Loaded message templates:`);
>     this.logger.info(`[${this.name}] streamerMessageTemplate: "${this.config.streamerMessageTemplate}"`);
>     this.logger.info(`[${this.name}] nonStreamerMessageTemplate: 
"${this.config.nonStreamerMessageTemplate}"`);
>     
>     this.logger.info(`[${this.name}] Configuration loaded: autoShoutout.enabled = 
${this.config.autoShoutout?.enabled === true ? 'enabled' : 'disabled'}`);
>   }
>   
>   registerCommands() {
>     this.commands = [
>       {
>         name: 'so',
>         config: {
>           description: 'Give a shoutout to a streamer',
>           usage: '!so <username> [custom message]',
>           aliases: ['shoutout'],
>           cooldown: 5,
>           modOnly: true,
>           enabled: true
>         },
>         execute: this.doShoutout.bind(this)
>       },
>       {
>         name: 'cleanshoutouts',
>         config: {
>           description: 'Clean up the shoutout history to only include streamers',
>           usage: '!cleanshoutouts',
>           aliases: [],
>           cooldown: 5,
>           modOnly: true,
>           enabled: true
>         },
>         execute: (client, channel, context) => {
>           this.logger.info(`[${this.name}] Manual shoutout history cleanup requested by 
${context.username}`);
>           const initialCount = Object.keys(this.shoutoutHistory).length;
>           this.cleanShoutoutHistory();
>           const finalCount = Object.keys(this.shoutoutHistory).length;
>           client.say(channel, `@${context.username}, shoutout history cleaned up. Entries: 
${initialCount} â†’ ${finalCount}`);
>           return true;
>         }
>       }
>     ];
>   }
>   
>   async doShoutout(client, channel, context, commandText) {
>     // Parse parameters from command text
>     const params = commandText.trim().split(' ').slice(1);
>     
>     if (!params || params.length === 0) {
>       client.say(channel, `@${context.username}, please specify a username to shout out.`);
>       return false;
>     }
>     
>     let username = params[0].toLowerCase();
>     if (username.startsWith('@')) {
>       username = username.substring(1);
>     }
>     
>     // Get any custom message
>     const customMessage = params.slice(1).join(' ');
>     
>     this.logger.info(`[${this.name}] Shoutout requested for ${username} by ${context.username}`);
> 
>     try {
>       // Log user lists status
>       this.logger.info(`[${this.name}] knownStreamers: ${JSON.stringify(this.config.knownStreamers || 
[])}`);
>       this.logger.info(`[${this.name}] knownNonStreamers: ${JSON.stringify(this.config.knownNonStreamers 
|| [])}`);
>       
>       // Log template configuration
>       this.logger.info(`[${this.name}] Current templates:`);
>       this.logger.info(`[${this.name}] streamerMessageTemplate: 
"${this.config.streamerMessageTemplate}"`);
>       this.logger.info(`[${this.name}] nonStreamerMessageTemplate: 
"${this.config.nonStreamerMessageTemplate}"`);
>       this.logger.info(`[${this.name}] messages.streamer: "${this.config.messages?.streamer}"`);
>       this.logger.info(`[${this.name}] messages.nonStreamer: "${this.config.messages?.nonStreamer}"`);
>       
>       // Get channel info through the Twitch API
>       this.logger.info(`[${this.name}] Getting channel info for ${username}`);
>       const channelInfo = await this.getChannelInfo(username);
>       
>       // Log the channelInfo result
>       if (channelInfo) {
>         this.logger.info(`[${this.name}] Channel info received for ${username}, treating as streamer`);
>         this.logger.info(`[${this.name}] Channel info: ${JSON.stringify(channelInfo)}`);
>         if (channelInfo.game_name) {
>           this.logger.info(`[${this.name}] ${username} has game info: ${channelInfo.game_name}`);
>         }
>         if (channelInfo.broadcaster_type) {
>           this.logger.info(`[${this.name}] ${username} broadcaster type: 
${channelInfo.broadcaster_type}`);
>         }
>         if (channelInfo.is_live) {
>           this.logger.info(`[${this.name}] ${username} is currently LIVE!`);
>         }
>       } else {
>         this.logger.info(`[${this.name}] No channel info for ${username}, treating as non-streamer`);
>       }
>       
>       // Create the shoutout message
>       const message = this.createShoutoutMessage(username, channelInfo, customMessage);
>       
>       // Save to shoutout history
>       this.saveToShoutoutHistory(username, channelInfo);
>       
>       // Log this status to discord if available
>       try {
>         if (this.bot.events) {
>           const statusMsg = channelInfo ? 
>             `Gave streamer shoutout to ${username}${channelInfo.game_name ? ` (game: 
${channelInfo.game_name})` : ''}` :
>             `Gave non-streamer shoutout to ${username}`;
>           
>           this.bot.events.emit('discord:log', {
>             plugin: this.name,
>             message: statusMsg
>           });
>         }
>       } catch (err) {
>         this.logger.debug(`[${this.name}] Error sending discord log: ${err.message}`);
>       }
>       
>       // Send the message
>       this.logger.info(`[${this.name}] Sending shoutout message: ${message}`);
>       client.say(channel, message);
>       return true;
>     } catch (error) {
>       this.logger.error(`[${this.name}] Error giving shoutout: ${error.message}`);
>       this.logger.error(`[${this.name}] Error stack: ${error.stack}`);
>       client.say(channel, `@${context.username}, failed to give shoutout to ${username}.`);
>       return false;
>     }
>   }
>   
>   // Event handlers
>   onChannelJoin(data) {
>     // Auto-shoutout happens when someone sends a message, not on join
>     this.logger.debug(`[${this.name}] Channel join detected: ${data.channel} by ${data.username}`);
>   }
>   
>   onTwitchMessage(data) {
>     if (this.config.autoShoutout.enabled && !data.self) {
>       this.checkAutoShoutout(data.tags.username, data.channel);
>     }
>   }
>   
>   async checkAutoShoutout(username, channel) {
>     const lowerUsername = username.toLowerCase();
>     
>     // Skip if not a known streamer
>     if (!this.config.knownStreamers.includes(lowerUsername)) {
>       return;
>     }
>     
>     // Check if we've already given a shoutout recently
>     if (this.shouldAutoShoutout(lowerUsername)) {
>       try {
>         const channelInfo = await this.getChannelInfo(lowerUsername);
>         
>         // Create auto-shoutout welcome message
>         let welcomeMessage = this.config.autoShoutout.welcomeMessage
>           .replace(/{username}/g, channelInfo?.display_name || username);
>           
>         // Create auto-shoutout message
>         let shoutoutMessage = this.config.autoShoutout.message
>           .replace(/{username}/g, channelInfo?.display_name || username);
>           
>         // Add game info if available
>         if (channelInfo && channelInfo.game_name) {
>           shoutoutMessage += ` They were last seen playing ${channelInfo.game_name}!`;
>         }
>         
>         // Save to history to prevent repeated shoutouts
>         this.saveToShoutoutHistory(lowerUsername, channelInfo);
>         
>         // Send the messages
>         this.client.say(channel, welcomeMessage);
>         setTimeout(() => {
>           this.client.say(channel, shoutoutMessage);
>         }, 1000); // Small delay between messages
>         
>         this.logger.info(`[${this.name}] Auto-shoutout given to ${username}`);
>       } catch (error) {
>         this.logger.error(`[${this.name}] Error giving auto-shoutout: ${error.message}`);
>       }
>     }
>   }
>   
>   shouldAutoShoutout(username) {
>     const lowerUsername = username.toLowerCase();
>     
>     // If not in history, definitely give a shoutout
>     if (!this.shoutoutHistory[lowerUsername]) {
>       return true;
>     }
>     
>     // Check cooldown
>     const lastShoutout = this.shoutoutHistory[lowerUsername].lastShoutout;
>     const cooldownMs = this.config.autoShoutout.cooldownHours * 60 * 60 * 1000;
>     const now = Date.now();
>     
>     return (now - lastShoutout) > cooldownMs;
>   }
>   
>   loadShoutoutHistory() {
>     try {
>       // First try to use the configManager's loadDataFile method if available
>       if (typeof this.configManager.loadDataFile === 'function') {
>         this.shoutoutHistory = this.configManager.loadDataFile('shoutoutHistory', {});
>       } else {
>         // Fallback to trying to load directly from the filesystem
>         const fs = require('fs');
>         const path = require('path');
>         const dataFilePath = path.join(process.cwd(), 'data', 'shoutoutHistory.json');
>         
>         if (fs.existsSync(dataFilePath)) {
>           const fileContent = fs.readFileSync(dataFilePath, 'utf8');
>           this.shoutoutHistory = JSON.parse(fileContent);
>         } else {
>           this.shoutoutHistory = {};
>         }
>       }
>       
>       this.logger.info(`[${this.name}] Loaded shoutout history for 
${Object.keys(this.shoutoutHistory).length} streamers`);
>     } catch (error) {
>       this.logger.error(`[${this.name}] Error loading shoutout history: ${error.message}`);
>       this.shoutoutHistory = {};
>     }
>   }
>   
>   saveShoutoutHistory() {
>     try {
>       // First try to use the configManager's saveDataFile method if available
>       if (typeof this.configManager.saveDataFile === 'function') {
>         this.configManager.saveDataFile('shoutoutHistory', this.shoutoutHistory);
>       } else {
>         // Fallback to saving directly to the filesystem
>         const fs = require('fs');
>         const path = require('path');
>         const dataDir = path.join(process.cwd(), 'data');
>         const dataFilePath = path.join(dataDir, 'shoutoutHistory.json');
>         
>         // Create the data directory if it doesn't exist
>         if (!fs.existsSync(dataDir)) {
>           fs.mkdirSync(dataDir, { recursive: true });
>         }
>         
>         // Save the file
>         fs.writeFileSync(dataFilePath, JSON.stringify(this.shoutoutHistory, null, 2), 'utf8');
>       }
>       
>       this.logger.debug(`[${this.name}] Saved shoutout history for 
${Object.keys(this.shoutoutHistory).length} streamers`);
>     } catch (error) {
>       this.logger.error(`[${this.name}] Error saving shoutout history: ${error.message}`);
>     }
>   }
>   
>   saveToShoutoutHistory(username, channelInfo) {
>     // Only save streamers to the history
>     if (!channelInfo) {
>       this.logger.debug(`[${this.name}] Not saving ${username} to shoutout history as they are not a 
streamer`);
>       return;
>     }
>     
>     const lowerUsername = username.toLowerCase();
>     
>     this.shoutoutHistory[lowerUsername] = {
>       displayName: channelInfo?.display_name || username,
>       lastShoutout: Date.now(),
>       game: channelInfo?.game_name || '',
>       url: `https://twitch.tv/${lowerUsername}`
>     };
>     
>     this.saveShoutoutHistory();
>     this.logger.debug(`[${this.name}] Updated shoutout history for streamer ${username}`);
>   }
>   
>   createShoutoutMessage(username, channelInfo, customMessage = '') {
>     try {
>       // Start with the announcement prefix
>       let message = `${this.config.announcementPrefix} `;
>       
>       // Log whether this is a streamer or non-streamer shoutout
>       if (!channelInfo) {
>         // USE NON-STREAMER FORMAT
>         this.logger.info(`[${this.name}] Using NON-STREAMER format for ${username}`);
>         
>         // Use the non-streamer template from the root level
>         const template = this.config.nonStreamerMessageTemplate || 
>                         'ðŸ’– Shoutout to @{username} - Thanks for being an awesome part of our 
community!!! ðŸ’–';
>         
>         this.logger.info(`[${this.name}] Using non-streamer template: "${template}"`);
>         message += template
>           .replace(/{username}/g, username)
>           .replace(/{displayName}/g, username);
>       } else {
>         // USE STREAMER FORMAT
>         this.logger.info(`[${this.name}] Using STREAMER format for ${username}`);
>         
>         // Prepare game info
>         let gameInfo = '';
>         if (channelInfo.game_name) {
>           gameInfo = channelInfo.game_name;
>           this.logger.info(`[${this.name}] Game info for ${username}: "${gameInfo}"`);
>         } else {
>           this.logger.info(`[${this.name}] No game info available for ${username}`);
>         }
>         
>         // Use the streamer template from the root level
>         const template = this.config.streamerMessageTemplate ||
>                         'ðŸŽ® Check out @{username} over at https://twitch.tv/{username} - They\'re an 
awesome streamer!!! ðŸ‘';
>         
>         this.logger.info(`[${this.name}] Using streamer template: "${template}"`);
>         message += template
>           .replace(/{username}/g, username)
>           .replace(/{displayName}/g, channelInfo.display_name || username)
>           .replace(/{gameInfo}/g, gameInfo);
>       }
>       
>       // Add custom message if provided
>       if (customMessage) {
>         message += ` ${customMessage}`;
>       }
>       
>       this.logger.info(`[${this.name}] Final shoutout message: ${message}`);
>       return message;
>     } catch (error) {
>       this.logger.error(`[${this.name}] Error creating shoutout message: ${error.message}`);
>       // Provide a simple fallback in case of error
>       return `${this.config.announcementPrefix} Shoutout to @${username}!`;
>     }
>   }
>   
>   async getChannelInfo(username) {
>     try {
>       const lowerUsername = username.toLowerCase();
>       
>       // First check if the user is in the known lists
>       if (this.config.knownNonStreamers && this.config.knownNonStreamers.includes(lowerUsername)) {
>         this.logger.info(`[${this.name}] ${username} is in known non-streamers list, will use 
non-streamer template`);
>         return null;
>       }
>       
>       // Check if user is in known streamers list
>       if (this.config.knownStreamers && this.config.knownStreamers.includes(lowerUsername)) {
>         this.logger.info(`[${this.name}] ${username} is in known streamers list, will use streamer 
template`);
>       }
>       
>       // Use a promise to handle the API request via event system
>       return new Promise((resolve, reject) => {
>         const requestId = `twitch-channel-${username}-${Date.now()}`;
>         
>         // Set up a listener for the API response
>         const responseHandler = (data) => {
>           if (data.requestId === requestId) {
>             // Clean up listener
>             this.bot.events.removeListener('twitch:api:channelInfo:response', responseHandler);
>             
>             // Check if we got valid channel info
>             if (data.error) {
>               this.logger.warn(`[${this.name}] Error getting channel info: ${data.error}`);
>               
>               // If they're in the known streamers list, treat as streamer despite API error
>               if (this.config.knownStreamers && this.config.knownStreamers.includes(lowerUsername)) {
>                 this.logger.info(`[${this.name}] Using fallback streamer info for ${username} (known 
streamer with API error)`);
>                 resolve({
>                   display_name: username,
>                   username: lowerUsername,
>                   game_name: '',
>                   is_live: false
>                 });
>               } else {
>                 // Treat as non-streamer on error
>                 this.logger.info(`[${this.name}] Treating ${username} as non-streamer due to API error`);
>                 resolve(null);
>               }
>             } else if (!data.channelInfo || Object.keys(data.channelInfo).length === 0) {
>               // No channel info means not a streamer
>               this.logger.info(`[${this.name}] No channel info for ${username}, treating as 
non-streamer`);
>               resolve(null);
>             } else {
>               // Got valid channel info
>               this.logger.info(`[${this.name}] Got channel info for ${username}: 
${JSON.stringify(data.channelInfo)}`);
>               
>               // Check if they have game info (current or recent)
>               if (data.channelInfo.game_name) {
>                 this.logger.info(`[${this.name}] ${username} has game info 
(${data.channelInfo.game_name}), treating as streamer`);
>                 resolve(data.channelInfo);
>               } else if (data.channelInfo.broadcaster_type && data.channelInfo.broadcaster_type !== '') {
>                 // They have a broadcaster type, so they've streamed before
>                 this.logger.info(`[${this.name}] ${username} has broadcaster type 
(${data.channelInfo.broadcaster_type}), treating as streamer`);
>                 resolve(data.channelInfo);
>               } else {
>                 // No game info or broadcaster type, check if they're in known streamers list
>                 if (this.config.knownStreamers && this.config.knownStreamers.includes(lowerUsername)) {
>                   this.logger.info(`[${this.name}] ${username} is in known streamers list but has no 
game info, still treating as streamer`);
>                   resolve(data.channelInfo);
>                 } else {
>                   // Treat as non-streamer
>                   this.logger.info(`[${this.name}] ${username} has no game info or broadcaster type and 
isn't in known streamers list, treating as non-streamer`);
>                   resolve(null);
>                 }
>               }
>             }
>           }
>         };
>         
>         // Register the listener
>         this.bot.events.on('twitch:api:channelInfo:response', responseHandler);
>         
>         // Set a timeout to prevent hanging
>         setTimeout(() => {
>           // Clean up the listener if it's still around
>           this.bot.events.removeListener('twitch:api:channelInfo:response', responseHandler);
>           
>           // If they're in the known streamers list, treat as streamer despite timeout
>           if (this.config.knownStreamers && this.config.knownStreamers.includes(lowerUsername)) {
>             this.logger.info(`[${this.name}] Using fallback streamer info for ${username} (timeout but 
known streamer)`);
>             resolve({
>               display_name: username,
>               username: lowerUsername,
>               game_name: '',
>               is_live: false
>             });
>           } else {
>             // Treat as non-streamer on timeout
>             this.logger.info(`[${this.name}] Timeout getting channel info for ${username}, treating as 
non-streamer`);
>             resolve(null);
>           }
>         }, 5000);
>         
>         // Emit the event to request channel info
>         this.logger.info(`[${this.name}] Requesting channel info for ${username} (request ID: 
${requestId})`);
>         this.bot.events.emit('twitch:api:channelInfo:request', {
>           requestId,
>           username,
>           requestor: this.name
>         });
>       });
>     } catch (error) {
>       this.logger.error(`[${this.name}] Error in getChannelInfo: ${error.message}`);
>       return null;
>     }
>   }
>   
>   onConfigUpdate(key, value) {
>     this.logger.info(`[${this.name}] Configuration update requested: key=${key}, 
value=${JSON.stringify(value)}`);
>     
>     // Convert the key to lowercase for case-insensitive matching
>     const normalizedKey = key.toLowerCase();
>     
>     // Special handling for specific config keys
>     switch(normalizedKey) {
>       case 'enabled':
>         // Update plugin enabled state
>         this.enabled = value === true || value === 'true' || value === 'enabled';
>         this.logger.info(`[${this.name}] Plugin ${this.enabled ? 'enabled' : 'disabled'}`);
>         break;
>         
>       case 'autoshoutout':
>       case 'autoshoutout.enabled':
>       case 'autoShoutout':
>       case 'autoShoutout.enabled':
>         // Handle auto-shoutout configuration changes
>         let isEnabled = false;
>         
>         // Normalize the input value to a boolean
>         if (typeof value === 'string') {
>           const normalizedValue = value.toLowerCase();
>           isEnabled = normalizedValue === 'enable' || normalizedValue === 'enabled' || 
>                      normalizedValue === 'true' || normalizedValue === 'on' || normalizedValue === '1';
>         } else {
>           isEnabled = Boolean(value);
>         }
>         
>         this.logger.debug(`[${this.name}] Setting autoShoutout.enabled to ${isEnabled} (from input: 
${value})`);
>         
>         // Ensure we have an autoShoutout object
>         if (!this.config.autoShoutout) {
>           this.config.autoShoutout = {
>             enabled: isEnabled,
>             cooldownHours: 24,
>             welcomeMessage: "Welcome back to the channel, @{username}!",
>             message: "ðŸŽ® Look who it is, @{username}! Check them out over at 
https://twitch.tv/{username}!!! ðŸ‘"
>           };
>         } else {
>           this.config.autoShoutout.enabled = isEnabled;
>         }
>         
>         // Remove the legacy property if it exists
>         if (this.config.autoshoutout !== undefined) {
>           delete this.config.autoshoutout;
>         }
>         
>         // Log the configuration change
>         this.logger.info(`[${this.name}] AutoShoutout ${isEnabled ? 'enabled' : 'disabled'}`);
>         
>         // Force update the config file to ensure changes are saved
>         const result = this.configManager.savePluginConfig(this.name, this.config);
>         this.logger.debug(`[${this.name}] Config save result: ${result ? 'success' : 'failed'}`);
>         
>         // Verify the configuration was updated
>         const updatedConfig = this.configManager.loadPluginConfig(this.name, {});
>         this.logger.debug(`[${this.name}] Config after update: autoShoutout.enabled = 
${updatedConfig.autoShoutout?.enabled}`);
>         break;
>         
>       // Handle message template updates
>       case 'messages.streamer':
>       case 'messages.nonstreamer':
>       case 'streamermessagetemplate':
>       case 'nonstreamermessagetemplate':
>         // Force reload to ensure we get the latest templates
>         this.reloadConfig();
>         // Run the normalize function to update templates
>         this.normalizeMessageTemplates();
>         this.logger.info(`[${this.name}] Message templates reloaded after config update`);
>         break;
>         
>       case 'knownStreamers':
>         // If the streamers list was updated, make sure to remove any duplicates in nonStreamers
>         if (Array.isArray(value)) {
>           // Remove any streamers that are also in nonStreamers
>           if (Array.isArray(this.config.knownNonStreamers)) {
>             for (const streamer of value) {
>               const lowerStreamer = streamer.toLowerCase();
>               const index = this.config.knownNonStreamers.findIndex(
>                 s => s.toLowerCase() === lowerStreamer
>               );
>               
>               if (index !== -1) {
>                 this.config.knownNonStreamers.splice(index, 1);
>                 this.logger.info(`[${this.name}] Removed ${streamer} from non-streamers as it's now in 
streamers list`);
>               }
>             }
>             
>             // Save the updated nonStreamers list
>             this.configManager.savePluginConfig(this.name, this.config);
>           }
>         }
>         break;
>         
>       case 'knownNonStreamers':
>         // If the non-streamers list was updated, make sure to remove any duplicates in streamers
>         if (Array.isArray(value)) {
>           // Remove any non-streamers that are also in streamers
>           if (Array.isArray(this.config.knownStreamers)) {
>             for (const nonStreamer of value) {
>               const lowerNonStreamer = nonStreamer.toLowerCase();
>               const index = this.config.knownStreamers.findIndex(
>                 s => s.toLowerCase() === lowerNonStreamer
>               );
>               
>               if (index !== -1) {
>                 this.config.knownStreamers.splice(index, 1);
>                 this.logger.info(`[${this.name}] Removed ${nonStreamer} from streamers as it's now in 
non-streamers list`);
>               }
>             }
>             
>             // Save the updated streamers list
>             this.configManager.savePluginConfig(this.name, this.config);
>           }
>         }
>         break;
>         
>       // If any other config key is updated, make sure we reload to catch message template changes
>       default:
>         // If this is a messages-related update, force reload
>         if (normalizedKey.includes('messages') || normalizedKey.includes('template')) {
>           this.reloadConfig();
>           this.normalizeMessageTemplates();
>           this.logger.info(`[${this.name}] Configuration reloaded after template-related update`);
>         }
>         break;
>     }
>   }
>   
>   // Update enable/disable methods to save state to config
>   enable() {
>     this.enabled = true;
>     this.config.enabled = true;
>     this.configManager.savePluginConfig(this.name, this.config);
>     this.logger.info(`[${this.name}] Plugin enabled`);
>     return true;
>   }
>   
>   disable() {
>     // Set this plugin to disabled
>     this.enabled = false;
>     
>     // Update the config
>     this.config.enabled = false;
>     this.configManager.savePluginConfig(this.name, this.config);
>     this.logger.info(`[${this.name}] Plugin disabled`);
>     return true;
>   }
> 
>   // Helper to ensure all templates are synchronized
    synchronizeTemplates() {
>     this.logger.info(`[${this.name}] Synchronizing message templates`);
>     
>     // Make sure we have a messages object
>     if (!this.config.messages) {
>       this.config.messages = {};
>       this.logger.info(`[${this.name}] Created new messages object in config`);
>     }
>     
>     // Get fresh config directly from file to ensure we have the latest
>     const freshConfig = this.configManager.loadPluginConfig(this.name, {});
>     this.logger.info(`[${this.name}] Loaded fresh config from file: ${JSON.stringify(freshConfig, null, 
2)}`);
>     
>     // If fresh config has messages, use those as source of truth
>     if (freshConfig.messages) {
>       if (freshConfig.messages.streamer) {
>         this.config.streamerMessageTemplate = freshConfig.messages.streamer;
>         this.config.messages.streamer = freshConfig.messages.streamer;
>         this.logger.info(`[${this.name}] Used fresh config streamer template: 
"${freshConfig.messages.streamer}"`);
>       }
>       
>       if (freshConfig.messages.nonStreamer) {
>         this.config.nonStreamerMessageTemplate = freshConfig.messages.nonStreamer;
>         this.config.messages.nonStreamer = freshConfig.messages.nonStreamer;
>         this.logger.info(`[${this.name}] Used fresh config non-streamer template: 
"${freshConfig.messages.nonStreamer}"`);
>       }
>     } else {
>       this.logger.warn(`[${this.name}] No messages found in fresh config`);
>     }
>     
>     // Set defaults if still missing
>     if (!this.config.streamerMessageTemplate) {
>       this.config.streamerMessageTemplate = 'ðŸŽ® Check out @{displayName} over at 
https://twitch.tv/{username} - {gameInfo} ðŸ‘';
>       this.config.messages.streamer = this.config.streamerMessageTemplate;
>       this.logger.info(`[${this.name}] Set default streamer template: 
"${this.config.streamerMessageTemplate}"`);
>     }
>     
>     if (!this.config.nonStreamerMessageTemplate) {
>       this.config.nonStreamerMessageTemplate = 'ðŸ’– Shoutout to @{displayName} - Thanks for being an 
awesome part of our community!!! ðŸ’–';
>       this.config.messages.nonStreamer = this.config.nonStreamerMessageTemplate;
>       this.logger.info(`[${this.name}] Set default non-streamer template: 
"${this.config.nonStreamerMessageTemplate}"`);
>     }
>     
>     // Ensure complete consistency between the two template formats
>     this.config.messages.streamer = this.config.streamerMessageTemplate;
>     this.config.messages.nonStreamer = this.config.nonStreamerMessageTemplate;
>     
>     // Log the final state
>     this.logger.info(`[${this.name}] Template synchronization complete:`);
>     this.logger.info(`[${this.name}] streamerMessageTemplate: "${this.config.streamerMessageTemplate}"`);
>     this.logger.info(`[${this.name}] nonStreamerMessageTemplate: 
"${this.config.nonStreamerMessageTemplate}"`);
>     this.logger.info(`[${this.name}] messages.streamer: "${this.config.messages.streamer}"`);
>     this.logger.info(`[${this.name}] messages.nonStreamer: "${this.config.messages.nonStreamer}"`);
>     
>     // Save the updated config
>     this.configManager.savePluginConfig(this.name, this.config);
>   }
> 
>   // Clean up the shoutout history to ensure only streamers are stored
>   cleanShoutoutHistory() {
>     const initialCount = Object.keys(this.shoutoutHistory).length;
>     this.logger.info(`[${this.name}] Cleaning shoutout history (current entries: ${initialCount})`);
>     
>     // If a user is in knownNonStreamers, remove them from history
>     for (const username of this.config.knownNonStreamers || []) {
>       if (this.shoutoutHistory[username]) {
>         delete this.shoutoutHistory[username];
>         this.logger.info(`[${this.name}] Removed known non-streamer ${username} from shoutout history`);
>       }
>     }
>     
>     // Save the updated history
>     this.saveShoutoutHistory();
>     
>     const finalCount = Object.keys(this.shoutoutHistory).length;
>     if (initialCount !== finalCount) {
>       this.logger.info(`[${this.name}] Shoutout history cleaned: removed ${initialCount - finalCount} 
entries, ${finalCount} entries remaining`);
>     }
>   }
> }
> 
> module.exports = new ShoutoutPlugin(); 


